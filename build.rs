use convert_case::Casing;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use std::fs;
#[derive(Debug, Clone, Serialize, Deserialize)]
struct Body {
    pub string: String,
    pub id_fprj: String,
    pub tip: String,
}
fn main() {
    let mut buf = String::from("// AUTOGENERATED BY BUILD.RS\n ");

    for (watch_name, body) in
        serde_json::from_slice::<BTreeMap<String, Vec<Body>>>(include_bytes!("sources.json"))
            .unwrap()
    {
        let mut watch_name = watch_name.replace('/', "_");

        if watch_name == "70mai_saphir" {
            watch_name = "seventy_mai_saphir".to_string()
        };
        let watch_name = watch_name;

        let mut inner = String::new();

        for bitter in body {
            let bitter_str = bitter
                .string
                .replace([')', ',', '%'], "")
                .replace(['/', '('], "_");

            let mut bitter_str = bitter_str.to_case(Case::Pascal);
            if bitter_str == "None".to_string() {
                bitter_str = "NoneValue".to_string()
            }
            let str = format!(r#"pub const {}: u32 = {};"#, bitter_str, bitter.id_fprj);

            if inner.contains(&bitter_str) {
                continue;
            }

            use convert_case::{Case, Casing};

            let comment = match bitter.tip.is_empty() {
                true => "",
                false => &format!("\n        /// {}", bitter.tip),
            };
            inner += &format!("{comment}\n        {str}");
        }
        buf += &format!(
            "\n#[allow(non_upper_case_globals)]\n#[allow(dead_code)]\n pub mod {watch_name} {{
            {inner}\n}}"
        );
    }

    fs::write("src/widgets/value_src.rs", buf).unwrap()
}

mod xiaomi_color {
    #[derive(Default, Debug, Clone)]
    pub enum ValueSrc {
        #[default]
        /// {tip}
        None = 0,
    }
}
